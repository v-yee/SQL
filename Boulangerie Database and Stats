-- store database for a simple boulangerie. 

-- each item starts with a quantity of 20 at the start of the day.
-- the following are the inputted values at the end of the day. 

CREATE TABLE boulangerie 
(id INTEGER PRIMARY KEY, 
name TEXT, 
quantity INTEGER, 
section TEXT, 
price INTEGER);

INSERT INTO boulangerie VALUES (1, "Baguette", 6, 'Bread', 3);
INSERT INTO boulangerie VALUES (2, "Ciabatta", 8, 'Bread', 5);
INSERT INTO boulangerie VALUES (3, "Danish", 3, 'Pastry', 2);
INSERT INTO boulangerie VALUES (4, "Croissant", 2, 'Pastry', 2);
INSERT INTO boulangerie VALUES (5, "Pain au Chocolate", 15, 'Pastry', 3);
INSERT INTO boulangerie VALUES (6, "Pao de Queijo", 10, 'Savoury', 1);
INSERT INTO boulangerie VALUES (7, "Raisin Bread", 17, 'Bread', 2.5);
INSERT INTO boulangerie VALUES (8, "Chocolate Eclair", 8, 'Pastry', 4.5);
INSERT INTO boulangerie VALUES (9, "Cream Cheese Bun", 6, 'Savoury', 4);
INSERT INTO boulangerie VALUES (10, "Ham & Cheese", 8, 'Savoury', 2.5);
INSERT INTO boulangerie VALUES (11, "Lavosh", 16, 'Bread', 1.5);
INSERT INTO boulangerie VALUES (12, "Caramel Pudding", 3, 'Sweets', 2.5);
INSERT INTO boulangerie VALUES (13, "Milk Pudding", 12, 'Sweets', 2.5);
INSERT INTO boulangerie VALUES (14, "Cinnamon Rolls", 4, 'Pastry', 2.4);
INSERT INTO boulangerie VALUES (15, "Bread Loaf", 18, 'Bread', 2);

-- quantity of item remaining
SELECT name, quantity 
FROM boulangerie;

-- name and price of the highest priced item, and lowest priced item. 
SELECT name, price 
FROM boulangerie
WHERE price = (select max(price) from boulangerie)
UNION ALL 
SELECT name, price 
FROM boulangerie
WHERE price = (select min(price) from boulangerie);

-- display database ordered by price
Select * 
FROM 
ORDER BY price desc;

-- avg price of items in each section
SELECT section, ROUND(AVG(price),2)
FROM boulangerie
GROUP BY section;

-- assess the popularity of the item, determine whether the item should be maintained, 
   removed, or have its price increased. 
SELECT name, price,
CASE 
  WHEN quantity >=15 THEN 'Not Popular'
  WHEN quantity <=5 THEN 'Popular'
  ELSE 'Normal'
END AS popularity,
CASE 
  WHEN quantity >15 AND price <=2 THEN 'Remove item'
  WHEN quantity <5 AND price <=2 THEN 'Increase price' 
  ELSE 'Maintain'
END AS procedure
FROM boulangerie
ORDER BY procedure DESC;

